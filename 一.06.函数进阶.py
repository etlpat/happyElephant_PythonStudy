"""
目录：
1.函数多返回值
2.函数多种传参方式
  (1)位置参数
  (2)关键字参数
  (3)缺省参数
  (4)不定长参数
3.匿名函数
"""









### 1.函数多返回值

## return：返回变量的值，并且结束函数
## 函数若想返回多个返回值，不能写多个return，而是在一个return中返回多个返回值
#
#
# 语法：def test_return():
#          return 1, 2, 3
#
# 调用：x, y, z = test_return()
#      print(x)  # 结果1
#      print(y)  # 结果2
#      print(z)  # 结果3
#
#
## 按照返回值的顺序，写对应顺序的多个变量接收即可
## 变量之间用逗号隔开
## 支持不同类型的数据return



# def func(f1, f2, f3, f4, num1, num2):
#     n1 = f1(num1, num2)
#     n2 = f2(num1, num2)
#     n3 = f3(num1, num2)
#     n4 = f4(num1, num2)
#     return n1, n2, n3, n4
#
# x1, x2, x3, x4 = func(lambda x,y:x+y, lambda x,y:x-y, lambda x,y:x*y, lambda x,y:x/y, 32, 17)
# print(x1, x2, x3, '%.2f' % x4)  # 49 15 544 1.88

















### 2.函数多种传参方式
## (1)位置参数
## (2)关键字参数
## (3)缺省参数
## (4)不定长参数





#### (1)位置参数

# 位置参数：调用函数是，根据函数定义的位置来传递参数
# 这种方法是咱们之前一直在使用的方法
# 注意：传递的参数和定义的参数的顺序及个数必须一致


# def user_info(name, age, num):
#     print(f"您的名字是{name}，年龄是{age}，电话号是{num}")
#
# user_info('jimmy', '18', '1234567')








#### (2)关键字参数

# 在Python中，关键字参数是指在函数调用时，通过指定参数名来传递参数的一种方式。
# 函数调用时，通过 “键 = 值” 形式传递参数
# 作用：可以让函数更加清晰、容易使用，同时也清除了参数的顺序要求


# def user_info(name, age, num):
#     print(f"您的名字是{name}，年龄是{age}，电话号是{num}")
#
#
# # 关键字传参
# user_info(name = 'jimmy', age = '18', num = '1234567')
#
# # 可以不按照固定顺序
# user_info(num = '1234567', name = 'jimmy', age = '18')
#
# # 可以和位置参数混用，位置参数必须在前，且匹配参数顺序
# user_info('jimmy', num = '1234567', age = '18')

# 注意：函数调用时，如果有位置参数时，位置参数必须在关键字参数前面，但关键字参数之间不存在先后顺序




# # 另外，如果函数定义中已经有默认参数值，我们可以只传递部分关键字参数。例如：
#
# def greet(name, message="Hello"):
#     print(f"{name}, {message}")
#
# greet(name="Alice")
# # 这将输出： Alice, Hello，因为我们只传递了一个关键字参数。








#### (3)缺省参数

# 缺省参数：也叫默认参数，用于定义函数，为参数提供默认值，调用函数时可不传该默认参数的值
# 注意：写参数时，缺省参数只能放在参数列表的最后面，无论是实参还是形参，否则报错
# 作用：当调用函数时没有传递参数，就会使用默认参数的值


# def user_info(name, num, age = 18):
#      print(f"您的名字是{name}，年龄是{age}，电话号是{num}")
#
# user_info(name = 'jimmy', num = '1234567')
# user_info('小八', 1234567, 44)








#### (4)不定长参数

## 不定长参数：也叫可变参数，用于不确定调用时会传递多少个参数的场景
## 作用：当调用函数时不确定参数个数时，可以使用不定长参数
#
# 不定长参数的类型：
#  （1）位置传参
#  （2）关键字传参



##  （1）不定长位置传参
# 参数为【*变量名】表示接受任意数量的位置参数，它会将所有传入的位置参数封装成一个【元组】。
# 不定长定义的形参作为元组存在，接收不定长数量的参数传入
# 注意：不定长位置传参的形参一般叫做 *args

# def f(*num):
#     print(num)
#
# f(1, 2, 3)  # 输出：(1, 2, 3)
# f('a', 'b', 'c', 'd')  # 输出：('a', 'b', 'c', 'd')




##  （2）不定长关键字传参
# 参数为【**变量名】表示接受任意数量的关键字参数，它会将所有传入的关键字参数封装成一个【字典】。
# 注意：不定长位置传参的形参一般叫做 *kwargs

# def f(**num):
#     print(num)
#
# f(a=1, b=2, c=3)  # 输出：{'a': 1, 'b': 2, 'c': 3}
# f(name='John', age=30, gender='male')  # 输出：{'name': 'John', 'age': 30, 'gender': 'male'}




# 当同时使用位置传参和关键字传参时，【*变量名】必须放在【**变量名】前面。

# def func(*n1, **n2):
#     print(n1)
#     print(n2)
#
# func(1, 2, 3, a=4, b=5)  # 输出：(1, 2, 3) {'a': 4, 'b'

















### 3.匿名函数
## (1)函数作为参数传递
## (2)lambda匿名函数






#### (1)函数作为参数传递

# 在前面的函数学习中，都是将 数据/数据容器 作为参数传入的
# 其实，我们也可以将函数作为一个参数传入函数内


# # 如下代码：
# def test_func(f):
#     num = f(1,2)
#     print(num)
#
# def add(x, y):
#     return x + y
#
# test_func(add)
# # 函数add，作为参数，传入了函数 test_func 中使用
# #   test_func需要一个函数作为参数传入，且这个函数的参数是两个数字，有返回值
# #   add接收两个数字，返回计算结果，add作为参数传递给了test_func使用
# #   最终在test_func内部，由传入的add函数，完成了对数字的计算操作


# 所以，这是一种，【计算逻辑的传递】，而非数据的传递
# 像上述那样，不仅是相加，相减、相乘等任何逻辑都可以自定义并作为函数传入
# 数据传递和函数传递的区别在于：【一个是数据不确定，另一个是计算逻辑不确定】







#### (2)lambda匿名函数

# 函数的定义中
#   def关键字，可以定义带有名称的函数
#   lambda关键字，可以定义匿名函数(无名称)
# 有名称的函数，可以使用名称来重复调用
# 无名称的匿名函数，只可以临时使用一次


# 匿名函数
# 语法：lambda 形式参数: 函数体...（一行代码）
#
#   lambda是关键字，表示定义匿名函数
#   形参数量无限制
#   函数体，就是函数的执行逻辑，要注意；【匿名函数的函数体只能写一行，无法写多行代码】
#
## 注意：【lambda函数体不用写return语句，默认直接return】



# def test_func(f, num1, num2):
#     num = f(num1, num2)
#     print(num)
#
# test_func(lambda x, y: x + y, 2, 3)  # 5
# test_func(lambda x, y: x * y, 5, 2)  # 10