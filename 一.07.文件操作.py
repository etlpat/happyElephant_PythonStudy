"""
目录：
1.文件的编码
2.文件的读取
3.文件的写入
4.文件的追加
5.文件操作综合案例
"""









### 1.文件的编码

# 文件使用编码技术(密码本)，将文本内容翻译成二进制，这样才能识别和储存。
# 编码技术：即翻译的规则，记录了如何将内容翻译为二进制，以及如何将二进制翻译回原本内容


# 计算机中有许多可用编码(密码本)
#   UTF-8
#   GBK
#   Big5
#   等


# UTF-8是目前全球通用的编码格式
# 除非有特殊需求，否则，一律以UTF-8格式进行文件编码即可

















### 2.文件的读取
## (1)open()打开文件
## (2)读操作相关方法 - read()/readline()/readlines()
## (3)对文件对象for循环
## (4)关闭文件(方法) -- close
## (5)with open语法



# # 什么是文件？
# 内存中存放的数据在计算机关闭后就会消失，要长久保留数据，就要使用硬盘、光盘、U盘等，为例便于数据的管理和检索，引入了文件的概念。
# 文件是指计算机中存储数据的一种形式，可以包含文字、图像、音频、视频等各种信息。
# 文件可以保存在计算机的硬盘、光盘、U盘、网络服务器等存储介质中，用户可以通过文件名或路径来访问和管理文件。
# 文件也是计算机系统中数据的基本单位，许多应用程序都需要使用文件来读取、写入和处理数据。



# 我们对文件的基本操作，大概可以分为三个步骤：
#   ①打开文件
#   ②读写文件
#   ③关闭文件



## (1)open()打开文件
#
# # 在Python中，使用open函数，可以打开一个已存在文件，或者创建一个新文件，语法如下：
#
#
# 语法：open(name, mode, encoding)
#
#   name：是要打开的目标文件名的字符串（可以包含文件所在的具体路径）
#   mode：设置打开文件的模式（访问模式）：只读、只写、追加等
#   encoding：编码格式（推荐使用UTF-8）   英文：v./n. 编码
#
#
# # 实例：f = open('python.txt', 'r', encoding='UTF-8')
# # encoding的顺序不是第三位，所以不能用位置参数，必须用关键字参数直接指定


# 补充：mode常用的三种基础访问模式
# 【r 只读】：以只读方式打开文件，文件的指针将会放在文件的开头。这是默认模式。
# 【w 只写】：打开一个文件只用于写入。如果文件已存在，则清空文件内容，并从头开始编辑；若文件不存在，则创建新文件。
# 【a 追加】：打开一个文件用于追加。若文件已存在，将新内容追加到原本内容之后；若文件不存在，则创建新文件进行写入。


# f = open('D:\Python\python项目\python_learn\文本.txt','r',encoding='UTF-8')
# print(type(f))  # <class '_io.TextIOWrapper'> 表示对文本进行io操作的类







## (2)读操作相关方法
## read()
## readline()
## readlines()



### ① read()方法
#
# 语法：文件对象.read(num)
#   num表示要从文件中读取的数据长度(单位：字节)
#
# 功能：从光标位置读取并返回num个字节的内容
# 【注意】：如果没有传入num，那么就表示读取文件中所有的数据。

# 注意：若多次调用read()，每次读取会在上次读取的结尾处继续读取，而不是从头开始
#   （即读取文件时，光标会延续上次操作的位置）


# f = open('D:\Python\python项目\python_learn\文本.txt', 'r', encoding='UTF-8')
# print(f.read(10))  # 读取了10个字符(转义字符算一个字符)
# # 打印：1234567890
# print(f.read())  # 接着上一次的位置，把剩下的读取完了
# # 打印：\n114514\n1919810\n





### ② readline()方法
#
# 语法：文件对象.readline()
# 功能：读取并返回光标所在位置后的一行内容

# f = open('D:\Python\python项目\python_learn\文本.txt', 'r', encoding='UTF-8')
# f.read(5) # 先把光标移动到第六个字节
# print(f.readline())  #读取并返回光标所在位置后的一行内容
# # 打印：67890





### ③ readlines()方法
#
# 语法：文件对象.readlines()
# readlines可以按照行的方式把整个文件中的内容进行一次性读取，并且返回的是一个【列表】，其中【每一行的数据】为一个元素
# 功能：将光标位置后的文本内容封装到列表中，每行为一个元素，并返回列表


# f = open('D:\Python\python项目\python_learn\文本.txt', 'r', encoding='UTF-8')
# print(f.readlines())  # 以列表的形式返回了每行的内容
# # 打印：['1234567890\n', '114514\n', '1919810']







## (3)对文件对象for循环

# 对文件对象for循环，每次循环中，【循环变量为文件的一行数据】

# f = open('D:\Python\python项目\python_learn\文本.txt', 'r', encoding='UTF-8')
# for x in f:
#     print(x)
# # 每次打印一行元素







## (4)关闭文件(方法) -- close
# 语法：文件对象.close()

# f = open('python.txt', 'r')
# f.close()

# 最后通过close，关闭文件对象，也就是关闭对文件的占用
# 如果不调用close，同时程序没有停止运行，那么这个文件将一直被Python占用


# f = open('D:\Python\python项目\python_learn\文本.txt', 'r', encoding='UTF-8')
# f.close()







## (5)with open语法

# 语法：with open(name, mode, encoding) as 文件对象:
# 通过在with open的语句块中对文件进行操作
# 可以在操作完成后自动关闭文件，避免遗忘close方法


# with open('D:\Python\python项目\python_learn\文本.txt', 'r', encoding='UTF-8') as f:
#     print(f.readlines())
#     f.close()
# # 上面代码出代码块自动关闭文件，可以不写close




# 文件操作汇总
# ————————————————————————————————————————————————————————————————————————————————————————
# 序号 |       操作                           |        功能
#  1  | 文件对象 = open(file,mode,encoding)   |  打开文件并获得文件对象
#  2  | 文件对象.read(num)                    |  读取并返回指定长度字节；不指定num则读取文件全部
#  3  | 文件对象.readline()                   |  读取并返回一行
#  4  | 文件对象.readlines()                  |  读取全部行，返回列表，列表元素为每行数据
#  5  | for 变量 in 文件对象:                  |  for循环文件的行，一次循环变量为一行数据
#  6  | 文件对象.close()                      |  关闭文件对象
#  7  | with open() as 文件对象:              |  通过with open语法打开文件，可自动关闭文件
# ————————————————————————————————————————————————————————————————————————————————————————


















### 3.文件的写入
### 4.文件的追加
### 5.文件操作综合案例