"""
目录：
一、字面量
二、注释
三、变量
四、数据类型
五、数据类型转换
六、标识符
七、运算符
八、字符串拓展
九、数据输入
"""








###### 一、字面量

#### 1.字面量的含义
####   字面量：被写在代码中的【固定的值】，称之为字面量


#### Python中常见的6中值（数据）的类型
## 数字(Number)     支持 整数(int)、浮点数(float)、复数(complex)、布尔(bool)
##                 补充：复数，如3+4j,以j结尾表示复数；布尔表示生活中的逻辑，即真True(1)和假False(0)
## 字符串(String)    记录文本的数据，加双引号
## 列表(List)       有序的可变序列
## 元组(Tuple)      有序的不可变序列
## 集合(Set)        无需不重复序列
## 字典(Dictionart) 无序Key-Value集合
## 空类（NoneType）  值为None，表示完全没有值


""""
print(666)#整数
print(3.14)#浮点数
print("Python")#字符串
"""










#### 二、注释

# 【单行注释】：以 # 开头，#右边的是辅助说明，不被执行
# #号和注释内容一般建议以一个空格隔开（Python规范要求）
# 快捷键是选中多行，然后 【ctrl+/】

# 我是单行注释



"""
【多行注释】：以一对三个双引号引起来（"""   """）来解释说明一段代码

 三引号本身为跨行字符串，但若不打印，则无任何跨行结果，可拿来当注释
"""

""" 我是多行注释 """












#### 三、变量

## 变量：在程序运行时，能存储计算结果或表示值的抽象概念，值可以改变
##      即在程序运行时，记录数据用的

## 变量的【定义格式】：
## 变量名称 = 变量的值


# a = 20
# print("a的值为",a) #注：print可输出多份内容，格式：print(内容1,内容2,...,内容n);
# a = 10
# print("a的值变成了",a)
# a += 30
# print("a的值变成了",a)













#### 四、数据类型

# 如何验证数据类型呢？
# 我们可以通过 type() 语句来得到数据的类型
# 语法：type(被查看类型的数据)
# type() 的返回值为括号中数据的类型


# # 1.print语句中，直接输出类型信息
# print(type(666))
# print(type(3.14))
# print(type("114514"))
#
#
# # 2.用变量存储type()的结果
# type_int = type(666)
# type_flo = type(3.14)
# type_str = type("114514")
# print(type_int)
# print(type_flo)
# print(type_str)
#
#
# # 3.type()语句查看变量中存储的类型信息
# a = 10
# print(type(a))#查看的是数据的类型，Py中变量本身没有类型











#### 五、数据类型转换

# 数据类型之间，在特定场景下，可以进行相互转换。 如字符串转数字、数字转字符串等

# 我们暂且先研究整数、浮点数和字符串间的转换
# 格式: 类型(变量名)
# int(x) :将x转换为一个整数
# float(x) :将x转换为一个浮点数
# str(x) :将x转换为字符串
# 以上这些函数的【返回值】为其转换后的结果



# num_str = str(3)
# print(num_str)        # 内容是 3
# print(type(num_str))  # 为 str 类型
#
#
# # 注：所以类型都可以转化为字符串，但是不是所有类型都能转化为整型、浮点型
# #    如"123"就可转化为整型，但是"嗨嗨嗨"显然不能转化为整型
# print(type(int("123"))) # 为 int 类型
# print(type(float("12.3"))) # 为 float 类型
#
#
# # 整数和浮点数之间可以相互转换(和C语言强制类型转换相似)
# print(int(2.5)) # 2  --- 浮点转整型，舍弃小数位 （丢失精度）
# print(float(2)) # 2.0 -- 整型转浮点，多加 .0  （增加精度）











#### 六、标识符

# 标识符：用户在编程时使用的一系列名字，用于给变量、类、方法等命名。

# Py中标识符的规则
# 1.内容限定 : 允许使用数字、字母、下划线、中文。（1）不推荐使用中文 （2）数字不可以开头
# 2.大小写敏感
# 3.不可使用关键字


# 变量命名规范
# 1.见名知意
# 2.下划线命名法
# 3.英文字母全小写











#### 七、运算符

# 算术运算符
# 加 +
# 减 -
# 乘 *
# 除 /
# 余 %
# 指数 **   (a**b  即a的b次方)
# 取整除 //  (a//b  即a/b的值向下取整)


## 赋值运算符
#  =
#  a = b ，即把b的值赋给a

## 复合赋值运算符
#  +=
#  -=
#  *=
#  /=
#  %=
#  **=  (a**=b 即 a = a**b)
#  //=  (a//=b 即 a = a//b)












#### 八、字符串拓展
### (1).字符串的三种定义方式
### (2).字符串拼接
### (3).字符串格式化
### (4).字符串格式化方式2




### (1).字符串的三种定义方式
# 1。单引号定义法：name = 'xxx'
# 2.双引号定义法：name = "xxx"
# 3.三引号定义法：name = """xxx"""
# 注：三引号定义法与多行注释写法一样，支持换行操作。使用变量接收它，它就是字符串；不使用变量接收它，就可以作为多行注释使用。

# print('111')
# print("111")
# name = """
# 111
# 222
# 333
# """ # 三引号中换行支持直接换，可以不加'\n'
# print(name)



# # 【若我们定义的字符串中间包含单引号、双引号自身怎么办？】
# # 下面为解决方案
# # 1.单引号定义法，可以内涵双引号
# # 2.双引号定义法，可以内涵单引号
# # 3.三引号定义法，可以内涵单引号、双引号
# # 4.可以使用转义字符(\)来将引号编程普通字符
#
# print("'1'1'4'5'1'4'")   # '1'1'4'5'1'4'
# print('"1"1"4"5"1"4"')   # "1"1"4"5"1"4"
# print("""1'1"4'5"1'4""")   # 1'1"4'5"1'4
# print("1\'1\"4\'5\"1\'4")  #1'1"4'5"1'4







### (2).字符串拼接
# 如果我们有两个字符串，可以通过加号"+"将其拼接成一个字符串
# 缺点如下
# 1.变量过多，则拼接麻烦
# 2.字符串无法和数字或其他类型完成拼接

# print("111"+"222") # 111222
# left = "114514"
# right = "1919810"
# print(left + right)







### (3).字符串格式化
# 字符串格式化，即通过占位的方法取拼接字符串
# 字符串格式化的语法:  ”%占位符“  %  变量
#
# 常见的占位符(格式化符号)：
# 字符串:%s  -- 将内容转换成字符串，放入占位位置
# 整数: %d  -- 将内容转换成整型，放入占位位置
# 浮点数:%f  -- 将内容转换成浮点型，放入占位位置
#
# 逻辑：前面先用占位符占一个位置，之后把后面的变量以对应的形式放到占位符所占的位置上去
# 若变量类型与占位符类型不同，则将变量转换为占位符的类型，之后再填入相应位置
# 注意，若是多个变量展位，变量要用()括起来，并按相应顺序填入


# # 例子: 通过占位拼接字符串
# left = 114
# right = 810
# message = "%s514,1919%s" % (left,right) # 变量为数字类型，但占位符为%s,则将变量变为字符串存入占位的地方
# print(message)
#
#
# # 例子: 通过占位完成数字与字符串的拼接
# name = "坂妹"
# num = 1527
# grade = 87.7
# message = "%s，编号为:%d，他本次的测试结果为:%f" % (name,num,grade)
# print(type(message))  # <class 'str'>
# print(message)  # 坂妹的编号为:1527,他本次的测试结果为87.700000



## 下面是字符串格式化的一些要点
## 【1】格式化的精度控制
#
# 我们可以用辅助符号 m.n 来控制数据的宽度和精度
# m ；控制宽度，若宽度设置小于数字本身，不生效
#     注意：小数点也有一位宽度
# .n；控制小数点精度，会四舍五入

# print("浮点%3f，数字%2d" % (11.2233,1233))    # 浮点11.223300，数字1233 (数字自身宽度超出规定宽度，则忽略限制宽度)
# print("%.2f" % 25.257)    # 25.26 (四舍五入)
# print("哈哈哈%10.4f哈哈哈" % 233.333)    # 哈哈哈  233.3330哈哈哈



## 【2】.可以传递表达式（表达式要加括号）
# 表达式:一条具有明确执行机构的代码语句
#       如  1+1  5*2  (注意，py中 赋值不是表达式，无返回值; 如a=1无返回值)

# print("5*5的结果为%d" % (5*5))    # 5*5的结果为25
# print('"111"的类型为%s' % type("111"))    # "111"的类型为<class 'str'>
#
# # 注意，若不加括号
# print("5*5的结果为%d" % 5*5)    #5*5的结果为55*5的结果为55*5的结果为55*5的结果为55*5的结果为5
# # 以上代码被编译器解释为 print(("5*5的结果为%d" % 5)*5)







### (4).字符串格式化方式2
# f快速格式化 (f：format（格式化）的缩写)
# 通过语法: f"内容{常量/变量/表达式}" 的格式来快速格式化
# 这里会把：常量原样输出、变量替换为变量的值、表达式计算其值后输出
# 快速格式化:不关心数据类型，不做精度控制 (直接把变量的值替换变量名)


# name = "坂妹"
# num = 1527
# grade = 87.7
# message = f"名为{name}，编号:{num}，测试结果:{grade}"
# print(message) # 名为坂妹，编号:1527，测试结果:87.7
# # (注意，87.7未变为87.700000 ，不做精度控制，照搬变量原值)


# # 若f字符串的括号内，允许出现表达式
# a = 2
# print(f"{2*3}")
# print(f"{2*a}")







# # 题目：股价计算小程序
# # 定义如下变量
# # name 公司名
# # stock_price 当前股价
# # stock_code 股票代码
# # stock_price_daily_growth_factor 股票每日增长系数
# # growth_days 增长天数
# # 计算，经过growth_days天增长后，股价达到了多少钱(浮点数保留两位精度)
# # 公司名：AAA，股票代码：114514，当前股价19.99，每日增长系数：1.2，经过7天增长后，股价达到了：71.36
#
# name = "AAA"
# stock_price = 19.99
# stock_code = "114514"
# stock_price_daily_growth_factor = 1.2
# growth_days = 7
#
# x = stock_price * (stock_price_daily_growth_factor ** growth_days)
# # f快速格式化
# print(f"公司名：{name}，股票代码：{stock_code}，当前股价{stock_price}，\
# 每日增长系数：{stock_price_daily_growth_factor}，经过{growth_days}天增长后，\
# 股价达到了：{x}")
# # 字符串格式化
# print("公司名：%s，股票代码：%s，当前股价%.2f，每日增长系数：%.1f，经过%d天增长后，股价达到了：%.2f}"
# % (name,stock_code,stock_price,stock_price_daily_growth_factor,growth_days,x))













#### 九、数据输入

# 数据输出 : print()
# 数据输入 : input()
#
# input()格式如下
# input(表达式)   # 会将()内表达式的值打印出来，并以【字符串】形式返回你从键盘输入的值
# 返回值为str类型，使用使用前记得转换为其他类型


# x = input("请随便输些什么:\n")
# print(type(x))  # <class 'str'> ，可见input()返回值为字符串



